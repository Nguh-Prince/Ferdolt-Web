# Generated by Django 4.1 on 2022-08-30 14:19

import logging

from django.db.utils import IntegrityError
from django.db import migrations

from core.functions import get_database_connection, sql_server_regex

def set_columnconstraint_references(apps, schema_editor):
    ColumnConstraint = apps.get_model("ferdolt", "ColumnConstraint")
    Column = apps.get_model("ferdolt", "Column")
    Database = apps.get_model("ferdolt", "Database")
    Table = apps.get_model("ferdolt", "Table")

    for database in Database.objects.all():
        connection = get_database_connection(database)

        if connection:
            # get the foreign keys in the target database
            cursor = connection.cursor()
            
            for table in Table.objects.filter(schema__database=database):
                query = f"""
                    select OBJECT_NAME(fks.referenced_object_id) table_name, 
                    sc2.name schema_name, COL_NAME(fks.referenced_object_id, fc2.referenced_column_id) column_name, 
                    COL_NAME(fks.parent_object_id, fc.parent_column_id) referencing_column 
                    FROM sys.foreign_keys fks 
                    LEFT JOIN sys.tables tab ON referenced_object_id = tab.object_id 
                    LEFT JOIN sys.schemas sc2 ON tab.schema_id = sc2.schema_id 
                    LEFT JOIN sys.foreign_key_columns fc ON fks.object_id = fc.constraint_object_id 
                    LEFT JOIN sys.foreign_key_columns fc2 ON fks.object_id = fc2.constraint_object_id
                    WHERE fks.parent_object_id=object_id('{table.schema.name}.{table.name}')
                """

                rows = cursor.execute(query)
                columns = [ column[0] for column in cursor.description ]

                for row in rows:
                    record = dict( zip( columns, row ) )
                    
                    try:
                        referenced_column = Column.objects.get( table__schema__database=database, table__name__iexact=record["table_name"], 
                        name__iexact=record["column_name"] )

                        try:
                            referencing_column = Column.objects.get( table=table, name__iexact=record["referencing_column"] ) 

                            constraint = ColumnConstraint.objects.get_or_create( column=referencing_column, is_foreign_key=True, defaults={'is_primary_key': False} )

                            constraint
                            constraint[0].references = referenced_column
                            constraint[0].save()

                            logging.info(f"Successfully { 'created' if constraint[1] else 'modified' } the foreign key constraint")

                        except Column.DoesNotExist as e:
                            logging.error(f"Couldn't find the {record['column_name']} column in the {record['table_name']} table")
                        
                        except IntegrityError as e:
                            logging.error(f"Error adding foreign key constraint on {table.name}{record['referencing_column']} to {record['table_name']}.{record['column_name']}. Error: {str(e)}")

                        except Column.MultipleObjectsReturned as e:
                            logging.error(f"Multiple {record['column_name']} columns in the {record['table_name']} table")

                    except Column.DoesNotExist as e:
                        logging.error(f"Couldn't find the {record['column_name']} column in the {record['table_name']} table")

        else:
            logging.error(f"Error connecting to the {database.name} database on {database.host}:{database.port}")
class Migration(migrations.Migration):

    dependencies = [
        ('ferdolt', '0013_columnconstraint_references'),
    ]

    operations = [
        migrations.RunPython( set_columnconstraint_references, reverse_code=migrations.RunPython.noop )
    ]
